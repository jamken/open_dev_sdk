开放平台设备接入协议
======================

本文档描述了 `开放平台 <http://>`_ 与本地视音频设备的信令接入协议，
通过本协议，开放平台可以获得设备远端控制，直播远端观看，云端录像等能力。

名词解释
^^^^^^^^^^^^^

- OVS：open video system，开放视频云，一种基于物联网云计算技术的视频云服务系统；
  与传统NVR，DVR类似，OVS可以接入和管理各种带视频功能设备，支持直播、录像、点播、P2P实时通信等功能，
  但是与传统NVR，DVR的不同在于用户可以在互联网上观看视频，
  并且因为应用了云计算技术，OVC拥有近于无限的接入能力以及海量的并发直播点播请求；OVC主要由OVC与OVD两部分组成。

- OVC：open video cloud，运行于云端的视频云平台；
  提供API接口以及管理网页，用户可以随时通过互联网，以网页、APP、公众号、小程序等方式接入IVC，对其下属的摄像头进行管理，并进行直播点播。

- OVD：open video device, 开放设备，安装在客户现场的，具有与OVC通信能力的视频设备，如摄像头，门铃，音箱等，OVD通过“开放协议”接入OVC，并接受OVC的管理。

- Channel：OVD上的视频通道；
  一般一路摄像头为一条channel。如果OVD为摄像头，则只有一条通道，且通道号必须为0；
  如果IVT为NVR/DVR，则会有多条通道，每条通道代表一个NVR管理下的摄像头。

- OVS RPC：IVT与IVR之间采用的通信协议

协议特性
^^^^^^^^^^^^

OVS RPC底层基于TCP/IP的WebSocket，应用层为基于JSON的自定义协议。

.. _`websocket URL`:

websocket URL：::

  ws://<OVC host:port>/ovc?login_code=<OVD设备ID>&login_passwd=<OVD接入密码>&hardware_model=<OVD的硬件型号>&firmware_model=<OVD的固件版本号>

OVD通过上述URL主动连接并登录OVC平台，其中“OVD设备ID”以及“VD接入密码”是平台指定的，因此IVT需要提供方法配置这两个参数，以便在连接OVC时使用；
如果URL中给定的设备ID与接入密码与平台配置不符，登录会失败。
“OVD的硬件型号”与“OVD的固件版本号”由OVD厂家自定义，主要用于后期问题追踪，以及用于支持平台远程固件升级。
另外，websocket的子协议标识为空，无需指定。

应用层协议的基本通信类型包括RPC与event（事件通知）两种：

1. RPC为一应一答模式；通信中的两个端点均可以发起RPC请求；在单一方向上，请求接收/回应方，必须根据请求到达的顺序来处理并回应请求；
两个方向上RPC请求有个各自的序列号，且独立计数；任一方向上的RPC请求与响应，不受另一方向上是否有RPC请求正在进行的影响。

2. 事件通知是没有应答的；通信中的两个端点均可以给对方发送事件通知。

接入流程
++++++++

1. OVD向OVC发起websocket连接，并携带上login_code，login_password等信息。

2. OVC侧在接收到请求后，验证OVD身份，若通过，则与OVD建立websocket连接。

3. OVD每10秒向OVC发送一个keepalive请求，在keepalive中携带OVD的状态，以及其下摄像头的状态信息。

4. 根据业务安排，OVD与OVC可以进行各种RPC与event的交换。

异常处理
++++++++

当通讯的一端发现如下异常时，需主动断开websocket连接：

1. 收到的RPC response的seq与期待的seq（序列号）不一致时

2. RPC相应超时，当RPC发起方发现对端在20秒后仍然没有响应请求

3. 数据包格式不正确

另外，WebSocket重连并不认为是设备下线，只有当OVC在30秒内没有收到该OVD的信息，才认为OVD下线

OVD开发指引
^^^^^^^^^^^^^

对于摄像机、NVR等OVD生产厂家，如希望自己的设备能够接入OVC平台，通过平台获得远程控制与播放等功能，则需要在设备中实现本文档描述的协议。
OVD设备并不需要支持本文档中罗列的所有RPC/event方法，OVD设备厂家可以根据自己设备的能力以及应用的业务场景选择实现部分功能。

因为本协议使用的协议是基于WebSocket以及JSON这两个非常通用的标准，因此只要根据自己设备的情况，选用合适的开源库便可非常快速的实现通信。

最小实现
+++++++++

1. OVD需要支持以websocket方式连接并登录平台，请参考`websocket URL`_.

2. OVD能够在与平台链接断开后定期主动尝试重连

3. OVD需要支持每10秒向平台发送 :ref:`keepalive <Keepalive>`.

4. OVD需要接受平台下发的`启动推流 <RTMPPublish>`_ 请求

5. OVD需要接受平台下发的`结束推流 <RTMPStopPublish>`_ 请求

6. OVD需要能够正确处理`异常情况 <异常处理>`_

7. OVD需要提供配置平台域名、端口、登录名与登录密码的方法（如通过摄像机web管理端）

推荐实现
++++++++

1. 如希望用户能够通过云平台获取摄像机的本地地址，以便用户本地登录设备，可考虑实现 :ref:`获取网络配置 <GetNetConfig>` 请求

2. 如果摄像机支持云台或缩放功能，推荐实现 :ref:`云台控制 <CtrlPTZ>`

3. 如果希望用户能够远程重启设备，推荐实现 :ref:`重启设备 <RebootChannel>`

调试方法
++++++++

为方便OVD开发人员调试协议，我们实现了一个云端的模拟平台，支持OVD登录，并能与OVD进行简单的通信，开发人员可以在浏览器中监控
模拟平台与OVD之间的所有应用层协议数据的交换，同时支持通过浏览器向OVD下发自定义的协议数据包。

该模拟平台的网页登录URL为: http://<domain>/?login_code=<OVD登录名>

设备的ws登录URL为： ws://<domain>/ovc?login_code=<OVD登录名>&login_passwd=<OVD登录密码>

只要保两个URL中的<OVD登录名>是相同的，就能从网页中看到设备与模拟平台的协议数据交互。

如需要使用该工具，请与我们取得联系。

应用层协议数据包格式
^^^^^^^^^^^^^^^^^^^^^^^^^^

此处数据包指的是应用层协议的数据包，即websocket的payload/message。数据包使用JSON标准进行串行化。

RPC request
++++++++++++

RPC请求包的格式 ::

  {
    "req": <字符串，必填，请求的RPC方法>,
    "params": <JSON对象，可选，RPC方法的参数；当方法没有参数时，此域不存在>,
    "seq": <整数，必填，RPC的序列号；每发送一次请求，+1>
  }

RPC调用成功的response
+++++++++++++++++++++++++++++++

当RPC调用成功，应答包的格式 ::

  {
    "seq": <整数，必填，RPC的序列号；与对应的RPC请求的序列号一致>,
    "resp": <JSON对象，必选，应答内容>
  }

RPC调用失败的response
++++++++++++++++++++++++++++++++

当RPC调用失败，应答包的格式 ::

  {
    "seq": <整数，必填，RPC的序列号；与对应的RPC请求的序列号一致>,
    "err": {
      "code": <整数，必填，错误码>,
      "msg": <字符串，必填，错误信息>
    }
  }

通用的error code

==========     ============
code            备注
==========     ============
1               内部系统错误
11              码流过大
12              重复请求推流
101             不支持的RPC方法
102             channel不存在
103             channel不在线
==========     ============

事件通知
+++++++++++

事件通知包的格式 ::

  {
    "event": <字符串，必填，事件名称>,
    "params": <JSON对象，可选，参数；当没有参数时，该域不存在>
  }


协议方法参考
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

设备心跳上报
-----------------------------

获取服务器信息
-----------------------------

实时流媒体推送
----------------------------

录像直存
----------------------------

报警通知
----------------------------

